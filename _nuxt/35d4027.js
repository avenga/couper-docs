(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{549:function(n,e,t){"use strict";t.r(e);var o,r=t(94),c=t.n(r),m=t(161),d=t(261),l=["components"],f={};function h(n){var e=n.components,t=Object(m.a)(n,l);return o("wrapper",c()([{},f,{},t,{attrs:{components:e,mdxType:"MDXLayout"}}]),[o("h1",["Expressions"]),o("p",["Since we use ",o("a",c()([{attrs:{parentName:"p"}},{href:"https://github.com/hashicorp/hcl/tree/hcl2#information-model-and-syntax"}]),["HCL 2.0"])," for our configuration, we are able to use attribute values as expression."]),o("pre",[o("code",c()([{attrs:{parentName:"pre"}},{className:"language-hcl"}]),['// Arithmetic with literals and application-provided variables\nsum = 1 + addend\n\n// String interpolation and templates\nmessage = "Hello, ${name}!"\n\n// Application-provided functions\nshouty_message = upper(message)\n'])]),o("p",["See ",o("a",c()([{attrs:{parentName:"p"}},{href:"./REFERENCE.md#functions"}]),["function reference"]),"."])])}h.isMDXComponent=!0,e.default={name:"Mdx",inject:{$mdxComponents:{default:function(){return function(){return{}}}}},computed:{components:function(){return this.$mdxComponents()}},render:function(n){return o=d.b.bind({createElement:n,components:this.components}),h({components:this.components})}}}}]);